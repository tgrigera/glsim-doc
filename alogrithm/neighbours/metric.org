# This file is part of glsim-doc
#
# Copyright (C) 2015, 2016 by Tomas S. Grigera
# <tgrigera@iflysib.unlp.edu.ar>
#
# glsim-doc is licensed under the Creative Commons
# Attribution-NonCommercial-ShareAlike 4.0 International License
# (http://creativecommons.org/licenses/by-nc-sa/4.0/).

#+TITLE: Finding metric nearest neighbours

glsim provides classes for finding metric nearest neighbours in
off-lattice systems, i.e. particles lying at a distance less that some
cutoff $r_c$ (=offlattice/nneighbours.hh=).  There are several of
them, implementing different nearest-neighbours algorithms with a
common interface.  The common aim of these algorithms is to reduce the
(very large) time that it takes to examine all $N(N-1)/2$ pairs to
check whether their distance lies within the cutoff.

Algorithms for nearest neighbours are to be thought of as providing
/candidates/.  For most algorithms here, pairs returned are *not*
guaranteed to be within cutoff.  Thus the user must loop over the
pairs returned and check their distance, as if it were a loop over all
pairs, but the algorithms here substantially reduce the candidates
list.  This feature allows to avoid rebuilding the support structures
at every step (which may be costly), by creating a "safety shell",
larger than the actual cutoff.  Candidates are guaranteed to appear
only once.  The ~for_each_pair~ functions *do* check that the distance
is within the actual cutoff and only call the requested action
function for pairs within the cutoff.


* Usage of nearest-neighbour classes

An appropriate object must be created, providing the cutoff radius
plus one optional tolerance parameter, which meaning is algorithm
dependent and controls how often the underlying structures will have
to be rebuild (see [[#algorithms]] for details).  Once created, the
~rebuild()~ method builds the internal data structures from scratch,
given a configuration.  With default parameters, you would create a
nearest neighbour object and initialise it like this:

#+name: create-generic
#+begin_src C++
// Create the nearest neighbour object
glsim::NeighbourList_subcells NN(rc);

glsim::OLconfiguration conf;
// read or create the configuration

// Initialise NN with
NN.rebuild(conf);
// or
NN.rebuild(conf,rcnew); // if you wish to reset the cutoff
#+end_src

After the call to ~rebuild()~, the ~NN~ object is ready to be used to
loop through (candidate) pairs as shown below.  If the configuration
changes, you must warn the object by calling ~update()~, which takes
an argument indicating the maximum distance a single particle was
moved since the last call to ~update()~ or ~rebuild()~.  The support
structures will be updated or rebuilt from scratch as necessary
(depending on the underlying algorithm), and the object will be ready
to loop over pairs again:

#+name: update-generic
#+begin_src C++
NN.rebuild(conf);
for (int i=0; i<STEPS; ++i) {
  // loop over pairs as explained below, compute e.g. forces
  <<...>>
  // update configuration
  << ... >>
  // maxdisp now holds the maximum of the distance each particle was displaced
  NN.update(maxdisp);
}
#+end_src

** Looping over pairs or neighbours

You can loop over candidate pairs generically like this:

#+name: loop-generic
#+begin_src C++
  template <typename NeighboursT>
  double loop_all_pairs(NeighboursT* NN,glsim::OLconfiguration &conf)
  {
    double totd=0,rcsq;

    for (auto p = NN->pairs_begin(), end=NN->pairs_end(); p!=end; ++p) {
      double dsq=conf.distancesq(p->first,p->second);
      if (dsq<NN.cutoffsq()) totd+=sqrt(dsq);  // Or whatever you have to do
    }
    return totd;
  }
#+end_src

However, if you will loop over /all/ pairs, it may be more efficient
to use ~for_each_pair~.  This function calls a given function
accepting as arguments two integers identifying the members of the
pair and a ~double~ giving the pair's squared distance.  The function
is *only* called for pairs strictly within cutoff (as opposed to the
iterator-like interface that returns candidates, you don't need an
extra ~if~ in your function to check the distance).

The function is a template, which is specialised for some neighbour
classes (like ~Subcell~), where speed gains are possible by looping
using the internal structures directly rather than through the generic
iterators (see the [[#benchmarks][benchmarks]] below).  Use ~for_each_pair()~ as
follows:

#+name: loop-with-for-each
#+begin_src C++
  struct accumulate {
    accumulate() : tot(0) {}
    void operator()(int i,int j,double dist) {tot+=sqrt(dist);}
    double tot;
  } ;

  template <typename NeighboursT>
  double loop_all_pairs(NeighboursT* NN)
  {
    return glsim::for_each_pair(NN,accumulate()).tot;
  }
#+end_src

Or, under =C++11=, with a lambda:

#+name: loop-with-for-each-lambda
#+begin_src C++
  template <typename NeighboursT>
  double loop_all_pairs(NeighboursT* NN)
  {
    double totd=0;
    glsim::for_each_pair(NN,[totd](int i,int j,double dsq){ totd+=sqrt(dsq);})
    return totd;
  }
#+end_src

It is also possible to loop over the neighbours of a given particle:

#+name: loop-neighbours-one-particle
#+begin_src C++
  template <typename NeighboursT>
  double loop_all_neighbours(NeighboursT* NN,int particle)
  {
    double totd=0,rcsq;

    for (auto p = NN->neighbours_begin(particle), end=NN->neighbours_end(particle);
                                                                        p!=end; ++p) {
      double dsq=conf.distancesq(p->first,p->second);
      if (dsq<NN.cutoffsq()) totd+=sqrt(dsq);  // Or whatever you have to do
    }
    return totd;
  }
#+end_src


* Algorithms
  :PROPERTIES:
  :CUSTOM_ID: algorithms
  :header-args: :noweb-ref create-nn
  :END:

** Naive

The naive implementation ~class MetricNearestNeighbours~ always
returns all pairs as candidates.

#+name: create-naive
#+begin_src c++ 
glsim::MetricNearestNeighbours* create_naive(glsim::OLconfiguration &conf,double rc)
{
 glsim::MetricNearestNeighbours* NN=new glsim::MetricNearestNeighbours(rc);
 NN->rebuild(conf);
 return NN;
}
#+end_src


** Naive neighbour list
   :PROPERTIES:
   :CUSTOM_ID: naive-list
   :END:

Builds a pair list cite:Allen1987,cite:Rapaport2004 by looping over
all possible pairs.  The candidate list includes neighbours in a
"safety shell" that extends to $r_c+\Delta r_c$.  The second argument
to the constructor is $\Delta r_c$.  The update method rebuilds the
lists only when the maximum displacement exceeds $\Delta r_c/2$.

#+name: create-nn-list-naive
#+begin_src c++ 
glsim::NeighbourList_naive* create_nnlistnaive(glsim::OLconfiguration &conf,double rc)
{
 glsim::NeighbourList_naive* NN=new glsim::NeighbourList_naive(rc,0.1*rc);
 NN->rebuild(conf);
 return NN;
}
#+end_src


** Subcells

This algorithm cite:Allen1987,cite:Rapaport2004 reduces the candidate
list by dividing the periodic box into a number of cells and assigning
all particles to the corresponding cell (this is a fast, $O(N)$
operation).  Then when asked to loop over pairs, only neighbouring
cells (which are known by construction) are examined.  The assignment
to cells is only done when particles have moved a certain amount.  A
"security layer" can be specified as the second argument to the
constructor, so that the actual cell size is $r_c+\Delta r_c$.

#+name: create-nn-subcell
#+begin_src c++ 
glsim::Subcells* create_nnsubcells(glsim::OLconfiguration &conf,double rc)
{
 glsim::Subcells* NN=new glsim::Subcells(rc,1e-3);
 NN->rebuild(conf);
 return NN;
}
#+end_src

** Pair list with subcells

This works like the [[#naive-list][naive neighbour list]] but uses the subcell
algorithm to build the lists.

#+name: create-list-subcell
#+begin_src c++ 
glsim::NeighbourList_subcells create_nl_subcell(glsim::OLconfiguration &conf,double rc)
{
 glsim::NeighbourList_subcells* NN=new glsim::NeighbourList_subcells(rc,1e-3);
 NN->rebuild(conf);
 return NN;
}
#+end_src


* Benchmarks
  :PROPERTIES:
  :CUSTOM_ID: benchmarks
  :END:

Here are some comparisons of the time it takes to loop ten times over
all pairs of a random configuration of various sizes.  You should
rerun these timings on your CPU with values of density and cutoff
typical of your problem to chose one of them.  We use =glsim='s
~gs_neighbour_time~ utility.

The difference between generic and ad-hoc loops depends on the
optimisation level.  With =-O3= I am seeing small but seemingly
reproducible differences in favour of ad-hoc looping through
~for_each_pair~ (note that looping over lists has no ad-hoc
~for_each_pair~).

#+name: time-naive
#+header: :results output raw :exports results
#+begin_src sh
time_algo()
{
N=$1
gs_neighbour_time --naive $N 1 3 | 
  gawk 'BEGIN {FS="\\t"} /#/ {next} /build/ {build=$2; next} /generic/ {generic=$2; next} /hoc/ {hoc=$2; next} END {print "|",'$N',"|",strtonum(build),"|",strtonum(generic),"|",strtonum(hoc)}' 
}
echo "|N|Build structures|Loop generic|Loop ad hoc|"
time_algo 100
time_algo 200
time_algo 500
time_algo 1000
time_algo 2000
time_algo 5000
#+end_src

#+CAPTION: Timings (in seconds) for the naive algorithm
#+RESULTS: time-naive
|    N | Build structures | Loop generic | Loop ad hoc |
|  100 |                0 |            0 |           0 |
|  200 |                0 |            0 |           0 |
|  500 |                0 |            0 |           0 |
| 1000 |                0 |            0 |           0 |
| 2000 |                0 |            0 |           0 |
| 5000 |                0 |            0 |           0 |


#+name: time-list-naive
#+header: :results output raw :exports results
#+begin_src sh
time_algo()
{
N=$1
gs_neighbour_time --list_naive $N 1 3 | 
  gawk 'BEGIN {FS="\\t"} /#/ {next} /build/ {build=$2; next} /generic/ {generic=$2; next} /hoc/ {hoc=$2; next} END {print "|",'$N',"|",strtonum(build),"|",strtonum(generic),"|",strtonum(hoc)}' 
}
echo "|N|Build structures|Loop generic|Loop ad hoc|"
time_algo 100
time_algo 200
time_algo 500
time_algo 1000
time_algo 2000
time_algo 5000
time_algo 10000
time_algo 20000
#+end_src

#+RESULTS: time-list-naive
|     N | Build structures | Loop generic | Loop ad hoc |
|   100 |                0 |            0 |        0.01 |
|   200 |                0 |         0.01 |        0.01 |
|   500 |             0.01 |         0.02 |        0.03 |
|  1000 |             0.02 |         0.05 |        0.04 |
|  2000 |              0.1 |         0.09 |        0.09 |
|  5000 |             0.58 |         0.22 |        0.22 |
| 10000 |             2.25 |         0.44 |        0.44 |
| 20000 |             8.88 |         0.87 |        0.88 |

#+name: time-subcell
#+header: :results output raw :exports results :eval no-export
#+begin_src sh
time_algo()
{
N=$1
gs_neighbour_time --subcells $N 1 3 | 
  gawk 'BEGIN {FS="\\t"} /#/ {next} /build/ {build=$2; next} /generic/ {generic=$2; next} /hoc/ {hoc=$2; next} END {print "|",'$N',"|",strtonum(build),"|",strtonum(generic),"|",strtonum(hoc)}' 
}
echo "|N|Build structures|Loop generic|Loop ad hoc|"
time_algo 100
time_algo 200
time_algo 500
time_algo 1000
time_algo 2000
time_algo 5000
time_algo 10000
time_algo 20000
#+end_src

#+CAPTION: Timings (in seconds) for the subcell algorithm
#+RESULTS: time-subcell

#+name: time-list-subcell
#+header: :results output raw
#+begin_src sh
time_algo()
{
N=$1
gs_neighbour_time --list_subcell $N 1 3 | 
  gawk 'BEGIN {FS="\\t"} /#/ {next} /build/ {build=$2; next} /generic/ {generic=$2; next} /hoc/ {hoc=$2; next} END {print "|",'$N',"|",strtonum(build),"|",strtonum(generic),"|",strtonum(hoc)}' 
}
echo "|N|Build structures|Loop generic|Loop ad hoc|"
time_algo 100
time_algo 200
time_algo 500
time_algo 1000
time_algo 2000
time_algo 5000
time_algo 10000
time_algo 20000
#+end_src

#+RESULTS: time-list-subcell
|     N | Build structures | Loop generic | Loop ad hoc |
|   100 |                0 |            0 |           0 |
|   200 |                0 |            0 |           0 |
|   500 |                0 |            0 |           0 |
|  1000 |                0 |            0 |           0 |
|  2000 |             0.09 |         0.08 |        0.08 |
|  5000 |             0.22 |          0.2 |        0.22 |
| 10000 |             0.47 |         0.41 |        0.42 |
| 20000 |             0.75 |          0.8 |        0.84 |

